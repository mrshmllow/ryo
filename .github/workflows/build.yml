name: Build
on:
  push:
  workflow_call:

jobs:
  gen-matrix:
    runs-on: ubuntu-latest
    name: generate node matrix
    outputs:
       alive-nodes: ${{ steps.alive-matrix.outputs.alive-nodes }}
       offline-nodes: ${{ steps.offline-matrix.outputs.offline-nodes }}
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v27
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
      - id: nodes
        name: nodes
        run: |
          echo "nodes=$(nix eval .#colmena --no-substitute --apply 'with builtins; x: filter (f: !elem f [ "defaults" "meta" ]) (attrNames x)' --json)" >> $GITHUB_OUTPUT
      - id: alive-nodes
        name: alive nodes
        run: echo "alive=$(tailscale status --json | nix run nixpkgs#jq -- -c '[.Peer | to_entries[] | select(.value.Online == true) | .value.HostName]')" >> $GITHUB_OUTPUT
      - id: alive-matrix
        name: alive matrix
        run: echo "alive-nodes=$(nix run nixpkgs#jq -- -cn --argjson nodes '${{ steps.nodes.outputs.nodes }}' --argjson alive '${{ steps.alive-nodes.outputs.alive }}' '$nodes - ($nodes - $alive)')" >> $GITHUB_OUTPUT
      - id: offline-matrix
        name: offline matrix
        run: echo "offline-nodes=$(nix run nixpkgs#jq -- -cn --argjson nodes '${{ steps.nodes.outputs.nodes }}' --argjson alive '${{ steps.alive-nodes.outputs.alive }}' '$nodes - $alive')" >> $GITHUB_OUTPUT
  apply-online:
    runs-on: ubuntu-latest
    name: apply online
    needs: gen-matrix
    strategy:
      matrix: 
        node: ${{ fromJson(needs.gen-matrix.outputs.alive-nodes) }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: cachix/install-nix-action@v27
        with:
          extra_nix_config: |
            extra-platforms = aarch64-linux i686-linux
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
      - name: build ${{ matrix.node }}
        run: >
          nix run nixpkgs#colmena --
          apply -v
          --no-build-on-target
          --no-keys
          --on ${{ matrix.node }}
  upload-keys:
    runs-on: ubuntu-latest
    name: upload-keys
    needs: apply-online
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: cachix/install-nix-action@v27
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
#      - name: upload keys
#        run: nix run nixpkgs#colmena -- upload-keys -v
      - name: upload keys
        run: echo "TODO"
  build-offline:
    runs-on: ubuntu-latest
    name: build offline
    needs: gen-matrix
    strategy:
      matrix: 
        node: ${{ fromJson(needs.gen-matrix.outputs.offline-nodes) }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: cachix/install-nix-action@v27
        with:
          extra_nix_config: |
            extra-platforms = aarch64-linux i686-linux
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - name: build ${{ matrix.node }}
        run: >
          nix run nixpkgs#colmena --
          build -v
          --no-build-on-target
          --on ${{ matrix.node }}
