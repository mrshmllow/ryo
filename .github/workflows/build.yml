name: Build

on:
  push:
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  gen-matrix:
    runs-on: ubuntu-latest
    name: generate node matrix
    outputs:
      all-nodes: ${{ steps.nodes.outputs.all-nodes }}
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v27
      - id: nodes
        run: |
          echo "all-nodes=$(nix eval .#colmena --no-substitute --apply 'with builtins; x: filter (f: !elem f [ "defaults" "meta" ]) (attrNames x)' --json)" >> $GITHUB_OUTPUT
  gen-matrix-hm:
    runs-on: ubuntu-latest
    name: generate hm matrix
    outputs:
      users: ${{ steps.users.outputs.users }}
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v27
      - id: users
        run: |
          echo "users=$(nix eval .#homeConfigurations --no-substitute --apply 'with builtins; x: (attrNames x)' --json)" >> $GITHUB_OUTPUT
  check:
    runs-on: ubuntu-latest
    name: check
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v27
      - run: nix flake check
  build-lix:
    runs-on: self-hosted
    name: build lix
    needs: 
      - check
    strategy:
      matrix: 
        system: [x86_64-linux, aarch64-linux]
    steps:
      - uses: actions/checkout@v4
      # - uses: docker/setup-qemu-action@v3
      - uses: cachix/install-nix-action@v27
        with:
          extra_nix_config: |
            extra-platforms = aarch64-linux i686-linux
      - uses: cachix/cachix-action@v14
        with:
          name: ryo
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - name: build ${{ matrix.system }}.lix
        run: nix build .#packages.${{ matrix.system }}.lix
  build:
    runs-on: self-hosted
    name: build offline
    needs: 
      - gen-matrix
      - build-lix
    strategy:
      matrix: 
        node: ${{ fromJson(needs.gen-matrix.outputs.all-nodes) }}
    steps:
      - uses: actions/checkout@v4
      # - uses: docker/setup-qemu-action@v3
      - uses: cachix/install-nix-action@v27
        with:
          extra_nix_config: |
            extra-platforms = aarch64-linux i686-linux
      - uses: cachix/cachix-action@v14
        with:
          name: ryo
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - name: build ${{ matrix.node }}
        run: >
          nix run nixpkgs#colmena --
          build -v
          --no-build-on-target
          --on ${{ matrix.node }}
  gen-alive-matrix:
    runs-on: ubuntu-latest
    name: generate alive node matrix
    needs:
      - gen-matrix
      # build so that we gen as close to apply time as possible
      - build
    outputs:
      alive-nodes: ${{ steps.alive-matrix.outputs.alive-nodes }}
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v27
      - uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
      - id: alive-nodes
        run: echo "alive=$(tailscale status --json | nix run nixpkgs#jq -- -c '[.Peer | to_entries[] | select(.value.Online == true) | .value.HostName]')" >> $GITHUB_OUTPUT
      - id: alive-matrix
        run: echo "alive-nodes=$(nix run nixpkgs#jq -- -cn --argjson nodes '${{ needs.gen-matrix.outputs.all-nodes }}' --argjson alive '${{ steps.alive-nodes.outputs.alive }}' '$nodes - ($nodes - $alive)')" >> $GITHUB_OUTPUT
  apply-online:
    runs-on: ubuntu-latest
    name: apply online
    needs: 
      - build
      - gen-alive-matrix
    strategy:
      fail-fast: false
      matrix: 
        node: ${{ fromJson(needs.gen-alive-matrix.outputs.alive-nodes) }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: cachix/install-nix-action@v27
        with:
          extra_nix_config: |
            extra-platforms = aarch64-linux i686-linux
      - uses: cachix/cachix-action@v14
        with:
          name: ryo
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
      - name: Configure GPG
        run: echo -n "$GPG_SIGNING_KEY" | base64 --decode | gpg --import
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
      - name: build ${{ matrix.node }}
        run: >
          nix run nixpkgs#colmena --
          apply -v
          --no-build-on-target
          --on ${{ matrix.node }}
  build-hm:
    runs-on: ubuntu-latest
    name: build home manager
    needs: 
      - check
      - gen-matrix-hm
    strategy:
      matrix: 
        user: ${{ fromJson(needs.gen-matrix-hm.outputs.users) }}
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v27
      - uses: cachix/cachix-action@v14
        with:
          name: ryo
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - name: build home manager
        run: >
          nix run nixpkgs#home-manager --
          build -v
          --flake .#${{ matrix.user }}
